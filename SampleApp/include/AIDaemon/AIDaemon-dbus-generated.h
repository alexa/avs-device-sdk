/*
 * Generated by gdbus-codegen 2.48.2. DO NOT EDIT.
 *
 * The license of this code is the same as for the source it was derived from.
 */

#ifndef __AIDAEMON_DBUS_GENERATED_H__
#define __AIDAEMON_DBUS_GENERATED_H__

#include <gio/gio.h>

G_BEGIN_DECLS


/* ------------------------------------------------------------------------ */
/* Declarations for com.obigo.Nissan.AIDaemon */

#define AIDAEMON_TYPE_ (aidaemon__get_type ())
#define AIDAEMON_(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), AIDAEMON_TYPE_, AIDaemon))
#define AIDAEMON_IS_(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), AIDAEMON_TYPE_))
#define AIDAEMON__GET_IFACE(o) (G_TYPE_INSTANCE_GET_INTERFACE ((o), AIDAEMON_TYPE_, AIDaemonIface))

struct _AIDaemon;
typedef struct _AIDaemon AIDaemon;
typedef struct _AIDaemonIface AIDaemonIface;

struct _AIDaemonIface
{
  GTypeInterface parent_iface;


  gboolean (*handle_send_messages) (
    AIDaemon *object,
    GDBusMethodInvocation *invocation,
    const gchar *arg_Data);

  void (*send_messages) (
    AIDaemon *object,
    const gchar *arg_Data);

};

GType aidaemon__get_type (void) G_GNUC_CONST;

GDBusInterfaceInfo *aidaemon__interface_info (void);
guint aidaemon__override_properties (GObjectClass *klass, guint property_id_begin);


/* D-Bus method call completion functions: */
void aidaemon__complete_send_messages (
    AIDaemon *object,
    GDBusMethodInvocation *invocation);



/* D-Bus signal emissions functions: */
void aidaemon__emit_send_messages (
    AIDaemon *object,
    const gchar *arg_Data);



/* D-Bus method calls: */
void aidaemon__call_send_messages (
    AIDaemon *proxy,
    const gchar *arg_Data,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean aidaemon__call_send_messages_finish (
    AIDaemon *proxy,
    GAsyncResult *res,
    GError **error);

gboolean aidaemon__call_send_messages_sync (
    AIDaemon *proxy,
    const gchar *arg_Data,
    GCancellable *cancellable,
    GError **error);



/* ---- */

#define AIDAEMON_TYPE__PROXY (aidaemon__proxy_get_type ())
#define AIDAEMON__PROXY(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), AIDAEMON_TYPE__PROXY, AIDaemonProxy))
#define AIDAEMON__PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), AIDAEMON_TYPE__PROXY, AIDaemonProxyClass))
#define AIDAEMON__PROXY_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), AIDAEMON_TYPE__PROXY, AIDaemonProxyClass))
#define AIDAEMON_IS__PROXY(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), AIDAEMON_TYPE__PROXY))
#define AIDAEMON_IS__PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), AIDAEMON_TYPE__PROXY))

typedef struct _AIDaemonProxy AIDaemonProxy;
typedef struct _AIDaemonProxyClass AIDaemonProxyClass;
typedef struct _AIDaemonProxyPrivate AIDaemonProxyPrivate;

struct _AIDaemonProxy
{
  /*< private >*/
  GDBusProxy parent_instance;
  AIDaemonProxyPrivate *priv;
};

struct _AIDaemonProxyClass
{
  GDBusProxyClass parent_class;
};

GType aidaemon__proxy_get_type (void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (AIDaemonProxy, g_object_unref)
#endif

void aidaemon__proxy_new (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
AIDaemon *aidaemon__proxy_new_finish (
    GAsyncResult        *res,
    GError             **error);
AIDaemon *aidaemon__proxy_new_sync (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);

void aidaemon__proxy_new_for_bus (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
AIDaemon *aidaemon__proxy_new_for_bus_finish (
    GAsyncResult        *res,
    GError             **error);
AIDaemon *aidaemon__proxy_new_for_bus_sync (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);


/* ---- */

#define AIDAEMON_TYPE__SKELETON (aidaemon__skeleton_get_type ())
#define AIDAEMON__SKELETON(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), AIDAEMON_TYPE__SKELETON, AIDaemonSkeleton))
#define AIDAEMON__SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), AIDAEMON_TYPE__SKELETON, AIDaemonSkeletonClass))
#define AIDAEMON__SKELETON_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), AIDAEMON_TYPE__SKELETON, AIDaemonSkeletonClass))
#define AIDAEMON_IS__SKELETON(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), AIDAEMON_TYPE__SKELETON))
#define AIDAEMON_IS__SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), AIDAEMON_TYPE__SKELETON))

typedef struct _AIDaemonSkeleton AIDaemonSkeleton;
typedef struct _AIDaemonSkeletonClass AIDaemonSkeletonClass;
typedef struct _AIDaemonSkeletonPrivate AIDaemonSkeletonPrivate;

struct _AIDaemonSkeleton
{
  /*< private >*/
  GDBusInterfaceSkeleton parent_instance;
  AIDaemonSkeletonPrivate *priv;
};

struct _AIDaemonSkeletonClass
{
  GDBusInterfaceSkeletonClass parent_class;
};

GType aidaemon__skeleton_get_type (void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (AIDaemonSkeleton, g_object_unref)
#endif

AIDaemon *aidaemon__skeleton_new (void);


G_END_DECLS

#endif /* __AIDAEMON_DBUS_GENERATED_H__ */
